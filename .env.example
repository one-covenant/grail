# ============================================================================
# NETWORK SELECTION (used by code in grail/shared/constants.py and network helper)
# ============================================================================
# Which Bittensor network to connect to:
# - finney : mainnet
# - test   : public testnet
# - custom : use BT_CHAIN_ENDPOINT below
BT_NETWORK=finney

# Optional explicit websocket endpoint (use for private/custom nodes)
# Example: wss://test.finney.opentensor.ai:443
BT_CHAIN_ENDPOINT=

# Your target subnet NETUID (e.g., 81 mainnet, 429 your test subnet)
NETUID=81

# ============================================================================
# WALLET CONFIGURATION
# ============================================================================
# These are *names* (aliases) you assign when creating the coldkey and hotkey.
# You can create a new one for mining/validating like `btcli wallet new_coldkey --wallet.name mywallet`
# Not the SS58 address or file path. Just the user-chosen wallet name.
# 1. BT_WALLET_COLD — the name you gave your coldkey (e.g., "mywallet")
# This key stays offline and is used for staking, registration, and ownership.
BT_WALLET_COLD=grail-validator

# 2. BT_WALLET_HOT — the name you gave your hotkey (e.g., "myhotkey")
# You can create a new one `btcli wallet new_hotkey --wallet.name mywallet --wallet.hotkey myhotkey`
# Note that mywallet here is the same from the previous set.
# This key is safe to use online and used for mining, validation, or inference.
BT_WALLET_HOT=grail-hotkey

# ============================================================================
# OPTIONAL: STORAGE (Cloudflare R2)
# ============================================================================
# 1. R2_BUCKET_ID: The name of the R2 bucket you create
# ➤ Go to https://dash.cloudflare.com > R2 > "Create Bucket"
# ➤ Choose a unique bucket name (e.g., `validator-artifacts`) — this is your BUCKET_ID.
R2_BUCKET_ID="grail-test"

# 2. R2_ACCOUNT_ID: Your Cloudflare account ID (used in API endpoints)
# ➤ Go to: https://dash.cloudflare.com > Click your account (top left) > Overview
# ➤ Copy the “Account ID” shown there.
R2_ACCOUNT_ID=

# 3. R2_WRITE_ACCESS_KEY_ID and R2_WRITE_SECRET_ACCESS_KEY:
# These are your API credentials to access/write to R2 via S3-compatible tools
# ➤ Go to: https://dash.cloudflare.com > R2 > "Manage R2 API Tokens"
# ➤ Click “Create API Token”
# ➤ Select **Edit Permissions**, and:
#   - Scope: `Account.Cloudflare R2 Storage` (or select R2 bucket explicitly)
#   - Permissions: `Edit` (for write access)
# ➤ Generate and copy both keys.
R2_WRITE_ACCESS_KEY_ID=
R2_WRITE_SECRET_ACCESS_KEY=

# ============================================================================
# OPTIONAL: HUGGING FACE
# ============================================================================
# 4. HF_TOKEN: Your Hugging Face access token for uploading datasets
# ➤ Go to: https://huggingface.co/settings/tokens
# ➤ Click "New token" and create a token with write permissions
# ➤ Copy the token (starts with hf_...)
# This is used to upload validated rollouts to the public Hugging Face dataset
HF_TOKEN=

# 5. HF_USERNAME: Your Hugging Face username (optional)
# ➤ This is your HuggingFace username (e.g., "fatheroffire")
# ➤ The dataset will be created at: {HF_USERNAME}/grail-sat-rollouts
# ➤ If not set, defaults to "fatheroffire"
HF_USERNAME=miahi

# ============================================================================
# GRAIL MODEL CONFIGURATION
# ============================================================================
# HuggingFace model name to use for GRAIL operations
GRAIL_MODEL_NAME=Qwen/Qwen2-0.5B-Instruct

# Maximum number of new tokens to generate during inference
GRAIL_MAX_NEW_TOKENS=100

# Number of rollouts to generate per problem (for GRPO training)
GRAIL_ROLLOUTS_PER_PROBLEM=4

# ============================================================================
# MONITORING SYSTEM CONFIGURATION
# ============================================================================
# Backend type for monitoring ("wandb" for WandB, "null" to disable)
GRAIL_MONITORING_BACKEND=wandb

# ============================================================================
# WANDB (WEIGHTS & BIASES) CONFIGURATION
# ============================================================================
# WandB project name (creates a project in your WandB workspace)
WANDB_PROJECT=grail

# WandB entity/team name (your username or team name, optional)
WANDB_ENTITY=tplr

# WandB mode - controls how data is sent to WandB
# - "online": Send data to WandB cloud in real-time (production)
# - "offline": Store data locally, sync later with: wandb sync
# - "disabled": Disable WandB completely
WANDB_MODE=online

# Tags for organizing runs (comma-separated)
WANDB_TAGS=grail,bittensor,production

# Description/notes for runs
WANDB_NOTES=GRAIL production monitoring

# Resume behavior for interrupted runs
# - "allow": Resume if possible, create new otherwise
# - "must": Must resume existing run (fails if not found)
# - "never": Always create new run
# - "auto": Automatically resume based on run ID
WANDB_RESUME=allow

# ============================================================================
# MONITORING PERFORMANCE TUNING
# ============================================================================
# Number of metrics to buffer before flushing to WandB (default: 100)
# Higher values = less network calls but more memory usage
GRAIL_METRIC_BUFFER_SIZE=100

# Interval in seconds between automatic metric flushes (default: 30.0)
# Lower values = more real-time data but more network overhead
GRAIL_METRIC_FLUSH_INTERVAL=30.0
